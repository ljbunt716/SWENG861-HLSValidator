package hlsfiles;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import common.CommonFile;
import common.CommonURL;

public class HLSFile {
	public String HLSText;
	public String FileName;
	public String FileBaseName;
	public String FileExtension;
	public URL Url;
	public List<String> LowerLevelFiles;
	public HLSFileType.Type Type;
	public Boolean IsMainFile;

	public HLSFile() {
		LowerLevelFiles = new ArrayList<String>();
	}

	public HLSFile(URL url) throws URISyntaxException {
		this(url, false);
	}

	public HLSFile(URL url, Boolean isMainFile) throws URISyntaxException {

		Url = url;
		FileName = CommonURL.GetFileName(Url);
		System.out.println("Fnam - " + FileName);
		FileBaseName = CommonFile.GetFileBaseName(FileName);
		FileExtension = CommonFile.GetFileExtension(FileName);

		HLSText = GetHLSText(Url);
		LowerLevelFiles = GetLowerLevelFiles(Url);

		Type = HLSFileType.GetFileType(Url);
		IsMainFile = isMainFile;
	}

	private String GetHLSText(URL url) {
		StringBuilder hlsText = new StringBuilder();

		Scanner scanner = null;

		try {
			try {
				// Get the text from the file with provided URL
				scanner = new Scanner(url.openStream());
			} catch (Exception ex) {
				System.out.println("File: " + url + " does not exist.");
			}

			// While there is something to get in file, append it to HLSText
			if (scanner != null)
				while (scanner.hasNextLine()) {
					hlsText.append(scanner.nextLine() + "\n");
				}

		} catch (Exception e) {
			// TODO Auto-generated catch block
			System.out.println("Error getting HLSText from file.");
		} finally {
			if (scanner != null)
				scanner.close();
		}

		return hlsText.toString();
	}

	private String GetHLSText(File file) {
		StringBuilder hlsText = new StringBuilder();

		// Construct BufferedReader from FileReader
		try (BufferedReader br = new BufferedReader(new FileReader(file))) {

			String line = null;

			while ((line = br.readLine()) != null) {
				hlsText.append(line);
			}
		} catch (Exception e) {
			System.out.println("Error getting HLSText from file.");
		}

		return hlsText.toString();
	}

	private List<String> GetLowerLevelFiles(URL url) {
		List<String> lowerLevelFiles = new ArrayList<String>();
		Scanner scanner = null;
		String nextLine = "";

		try {

			// Get the text from the file with provided URL
			scanner = new Scanner(url.openStream());

			// While there is something to get in file, append it to HLSText
			while (scanner.hasNextLine()) {
				nextLine = scanner.nextLine();
				if (IsLowerLevelFile(nextLine))
					lowerLevelFiles.add(nextLine);
			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			if (scanner != null)
				scanner.close();
		}

		return lowerLevelFiles;
	}

	private List<String> GetLowerLevelFiles(File file) {
		List<String> lowerLevelFiles = new ArrayList<String>();

		// Construct BufferedReader from FileReader
		try (BufferedReader br = new BufferedReader(new FileReader(file))) {

			String line = null;

			while ((line = br.readLine()) != null) {
				if (IsLowerLevelFile(line))
					lowerLevelFiles.add(line);
			}
		} catch (Exception e) {
			System.out.println("Error getting Lower Level Files from file.");
		}

		return lowerLevelFiles;
	}

	private Boolean IsLowerLevelFile(String line) {
		return !line.startsWith("#") && !line.trim().equals("");
		// return !line.startsWith("#") && line.contains(".m3u8");
	}
}
