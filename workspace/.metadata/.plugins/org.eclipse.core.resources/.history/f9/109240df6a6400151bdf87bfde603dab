package validators;

import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.List;

import hlsfiles.HLSFileWDirectory;
import validators.ChildFile.ChildFileValidator;
import validators.MainFile.MainFileValidator;

public class Validator {
	public HLSFileWDirectory File;
	public static List<Error> Errors;
	public Boolean IsValidFile;

	public Validator() {
		IsValidFile = false;
	}

	public Boolean IsValid() {
		return false;
	}

	public void ValidateFile() {
		Errors = new ArrayList<Error>();

		// Step 1 - Check File Type
		// DO NOT PROCEED IF INVALID FILE TYPE
		if (IsValidFileType()) {

			// Step 2 - Check that all child files exist
			ValidateAllFilesExist();

			// Step 3 - Check if File starts with #EXTM3U
			ValidateFileStartWithEXTM3U();

			// Step 4 - Validate all #EXT is uppercase
			ValidateEXTIsUpper();

			// Step 5 - Validate all validation dependent upon file type
			// Only Process if it's Main File
			if (File.IsMainFile)
				ValidateMainFileOnlyValidation();
			else
				ValidateChildFileOnlyValidation();

		}

		IsValidFile = (Errors.size() == 0);
		if (!IsValidFile)
			WriteErrorsToFile();

	}

	private void WriteErrorsToFile() {

		String desktop = System.getProperty("user.home") + "/Desktop/HLSErrors";

		// Create folder to put files in if folder not already created
		java.io.File folder = new java.io.File(desktop);
		if (!folder.exists())
			folder.mkdir();

		java.io.File output = new java.io.File(desktop + "/Error-" + File.FileBaseName + ".txt");

		FileOutputStream fos;
		BufferedWriter bw = null;
		try {
			fos = new FileOutputStream(output);
			bw = new BufferedWriter(new OutputStreamWriter(fos));

			// Write header row
			bw.write("Error Number" + "\t");
			bw.write("Error Type" + "\t");
			bw.write("File Name" + "\t");
			bw.write("Details of Error" + "\t");

			// Write Errors
			int errorCount = 0;
			for (Error error : Errors) {
				bw.newLine();
				bw.write(errorCount++ + "\t");
				bw.write(error.FailArea + "\t");
				bw.write(File.FileName + "\t");
				bw.write(error.FailMessage);
			}

		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {
			try {
				if (bw != null)
					bw.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

	// region Validations
	private Boolean IsValidFileType() {
		FileTypeValidator fileType = new FileTypeValidator(File);
		return fileType.IsValid();
	}

	private void ValidateAllFilesExist() {
		FileExistsValidator fileExist = new FileExistsValidator(File);
		fileExist.Validate();
	}

	private void ValidateFileStartWithEXTM3U() {
		FileBeginWithValidator fileBeginWithEXTM3U = new FileBeginWithValidator(File);
		fileBeginWithEXTM3U.Validate();
	}

	private void ValidateEXTIsUpper() {
		FileHasEXTAsUpperValidator fileHasEXTAsUpper = new FileHasEXTAsUpperValidator(File);
		fileHasEXTAsUpper.Validate();
	}

	private void ValidateMainFileOnlyValidation() {
		MainFileValidator mainFile = new MainFileValidator(File);
		mainFile.Validate();
	}

	private void ValidateChildFileOnlyValidation() {
		ChildFileValidator childFile = new ChildFileValidator(File);
		childFile.Validate();
	}

	// endregion

	// Adds an error to the Validation Error list
	public void AddValidationError(String message, String area) {
		Errors.add(new Error(message, area));
	}

}
